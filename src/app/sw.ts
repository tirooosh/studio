// This is a custom service worker file that uses Workbox
// to enable offline functionality for the PWA.

import { precacheAndRoute } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate, CacheFirst, NetworkFirst } from 'workbox-strategies';
import { ExpirationPlugin } from 'workbox-expiration';

declare const self: ServiceWorkerGlobalScope;

// Precache all the assets generated by the build process.
// Their URLs are injected into the manifest file during the build.
precacheAndRoute(self.__WB_MANIFEST);

// Explicitly cache essential files for offline functionality
precacheAndRoute([
  { url: '/', revision: null },
  { url: '/index.html', revision: null },
  { url: '/manifest.json', revision: null },
  { url: '/favicon.ico', revision: null },
  { url: '/icons/icon-192x192.png', revision: null },
  { url: '/icons/icon-512x512.png', revision: null },
]);

// Runtime caching for Google Fonts
registerRoute(
  new RegExp('^https://fonts\.googleapis\.com/.*', 'i'),
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-stylesheets',
  })
);

registerRoute(
  new RegExp('^https://fonts\.gstatic\.com/.*', 'i'),
  new StaleWhileRevalidate({
    cacheName: 'google-fonts-webfonts',
    plugins: [
      // Cache fonts for one year
      new ExpirationPlugin({
        maxEntries: 30,
        maxAgeSeconds: 60 * 60 * 24 * 365,
      }),
    ],
  })
);

// Cache images with a CacheFirst strategy
registerRoute(
  new RegExp('\.(?:png|gif|jpg|jpeg|svg|ico)$'),
  new CacheFirst({
    cacheName: 'images',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 60,
        maxAgeSeconds: 30 * 24 * 60 * 60, // 30 Days
      }),
    ],
  })
);

// Cache pages with a NetworkFirst strategy
// This will prioritize getting the latest version of the page from the network.
// If the network is unavailable, it will fall back to the cached version.
registerRoute(
  ({ request }) => request.mode === 'navigate',
  new NetworkFirst({
    cacheName: 'pages',
    plugins: [
      new ExpirationPlugin({
        maxEntries: 50,
      }),
    ],
  })
);

// Cache other assets with a StaleWhileRevalidate strategy
registerRoute(
  new RegExp('\.(?:js|css|json)$'),
  new StaleWhileRevalidate({
    cacheName: 'static-resources',
  })
);
